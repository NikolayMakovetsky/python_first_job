print(r"""
Работа с байтовыми данными важна при взаимодействии с низкоуровневыми операциями,
такими как чтение и запись файлов, сетевое взаимодействие и шифрование.

Байтовые литералы всегда начинаются с префикса 'b' или 'B',
они производят экземпляр bytes вместо str.
Они могут содержать только символы ASCII.
Байты с числовым значением 128 или более
должны быть выражены с помощью экранирования '\' """)

print("\n---Создание байтовых объектов")
# Функция bytearray() создает изменяемый объект, позволяя изменять его содержимое
data = bytearray([65, 66, 67, 68])
print(data)  # bytearray(b'ABCD')

# функция bytes() создает неизменяемый объект,
# который является более эффективным в использовании в определенных ситуациях.
data = bytes([65, 66, 67, 68])
print(data)  # b'ABCD'

print("\n---Работа с байтовыми данными")
# Байтовые данные могут быть использованы для хранения и передачи информации,
# такой как изображения, аудиофайлы или сетевые пакеты.
data = bytes([72, 101, 108, 108, 111])
print(data)  # b'Hello'

print("\n---Изменение байтовых данных")
data = bytearray(b'Python')
print(data)
data[0] = 81
data[-1] = 122
print(data)  # bytearray(b'Python')

print("\n---Преобразование байтовых данных в строку")

data = b'Hello'
text = data.decode()
print(text)  # Hello

print("\n---Преобразование строковых данных в байты")

text = "Привет"
data = text.encode()
print(data)  # b'\xd0\x9f\xd1\x80\xd0\xb8\xd0\xb2\xd0\xb5\xd1\x82'

print("\n---Манипуляции с байтовыми данными (срезы)")

data = bytearray(b'Hello')
slice = data[1:4]
print(slice)  # bytearray(b'ell')
