print("\n---Объект многоточие в Python (Ellipsis)")

# По сути Ellipsis это встроенная константа, подобная True и False,
# а ... (три точки) – соответствующий литерал
print(f"{Ellipsis = }")
print(f"{... = }")

print("\n---Использоавние ... при аннотации типов")


print("\n---Аннотирование кортежа целых чисел, который может иметь любую длину")
def return_tuple() -> tuple[int, ...]:
    pass

print("\n---Аннотирование функции, сигнатура которой может меняться")
from typing import Callable

def return_callable() -> Callable[..., int]:
    pass

print("\n---Замена ключевого слова pass (но лучше pass используй)")

def my_function(): 
    1 # так тоже работает

def my_function():
    ... # так тоже работает


# использование объекта Ellipsis может указывать на то,
# что определенная функция еще не полностью реализована,
# но вызывать исключение NotImplemented кажется излишеством

print("\n---Объект Ellipsis на практике")

# В FastAPI он используется для того, чтобы сделать параметры обязательными,
# а в Typer он довольно похож:
# указывает на то, что требуется аргумент командной строки.

# Так что если в процессе разработки нового инструмента или библиотеки
# вам понадобится литерал-заполнитель, вспомните об объекте многоточия.